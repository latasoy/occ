== Welcome to OATS Control Center (OCC)

OCC is a web RoR application used to organize, distribute, monitor, and control
test executions on various tests environments in parallel via OATS agents
installed on client windows machines. The main components of OCC are the Ruby,
RoR, MySQL, and WebServer. The basic use case for OCC is to request execution of
one or more test Lists on a particular test Environment.


== FEATURES

As each Job completes, OCC collects the results, calculate execution statistics and
summary of results for display.

The user can also issue a Stop request for an Environment.  OCC would then
remove all Jobs associated with that Environment from the queue and also send a
"Stop" request to the all agents currently executing associated Jobs.  After
receiving this request, each Agent will finish the currently executing test but
execute no more tests for that job, report the results to OCC, and be available for
other Jobs.

OCC also provides several other user features such as reissuing a Run request
(including all associated Jobs), requesting rerun of a specific Job, etc.

OCC also employs automatic rerun logic, which reruns a Job if it the number of
failures seen for the test List is more than the previous execution on the same
environment.

The testers can drill down from the summary execution display and look at
individual test results, log files, and other test artifacts for a particular Job.


== INSTALLATION OF COMPONENTS

Installing OCC on Linux or Mac is recommended.

= Install OATS, Ruby, and NetBeans as described in README.txt of
  https://github.com/latasoy/oats.

  Make sure OATS_HOME/bin is in your PATH, where OATS_HOME is where oats gem is
  installed or oats is cloned from github

= Install Mysql server

 - On Ubuntu,
   - Also install 'libmysqlclient-dev' package needed by mysql2 gem
   - sudo update-rc.d mysql defaults # To start mysql on reboot

 -  On Mac
   - export DYLD_LIBRARY_PATH="/usr/local/mysql/lib:$DYLD_LIBRARY_PATH"
   - On Mac make sure NetBeans environment also contains the DYLD_LIBRARY_PATH
     (Include 'source ~/.profile' to the  ...bin/netbeans script.)


 - Do the following if you want to enable remote access to  mysql DB)
  - Comment out local Bind Address from /etc/mysql/my.conf
  - mysql -u root -e "grant all privileges on *.* to 'root'@'%' identified by 'PASSWD' ; "
  - service mysql restart

= Install, Configure, and Start OCC

The steps below presume that you are familiar with the basic concepts and
operation of Ruby on Rails applications in general.

 - git clone https://github.com/latasoy/occ
 - cd occ; (sudo) bundle install

 - Add Oats.data execution.occ.hostname entry into oats_user.yml and set it
   to hostname of OCC machine

 - Set the variables in occ/doc/occ_environment_vars and introduce them ot your
  environment and/or the variables in oats_loads.rb and secret_token.rb in in
  occ/config/initializers.

 - Adjust the password, username, and host entries in  occ/config/database.yml
 - cd occ; rake db:setup # Create the DB schema. Type 'rake -T' for all options.
 - cd occ; rake assets:precompile

 - Start OCC by typing 'occ' in occ folder (or after defining OATS_OCC_HOME)


== WebServer

OCC produces and displays the job summary tables from the intermediate and
final tests results data it receives from the OATS agents and saves it in its
database.

OCC does not, however, display the test log files or any other test artifact files
directly, but delegates it to a WebServer  which has direct access to the test result
directories residing on the client machines. The name of the web server is indicated
by execution.occ.results_webserver entry of the oats.yml file.

For this redirection to work, you should install Apache on each agent machine. See
the instructions in OATS_HOME/doc/oats_httpd.conf

== Other Setup and Configuration Steps

The WebServer  is also used for displaying the contents of test directories and files
as redirected by OCC. The contents of such files or directories may be out of date,
unless these directories are regularly updated from code repositories.  OCC also
relies on some code shared from oats folder.  Unless OCC is configured to perform
such updates automatically, you should manually update these folders to contain
the latest OATS/OCC Framework code as well as directory of tests of Application
Under Test (AUT)

As a result, OCC expects to see a relatively current version of oats folder. In
addition to some shared classes from the oats/lib folder, it also uses some scripts
in the oats/bin, the occ configuration entries in oats/test/oats.yml, and the
oats/test/list folder to display the current test contents of lists.


==  USAGE

You should be familiar with OATS before you use OCC. For further information on
OATS, please refer to README.txt for OATS (https://github.com/latasoy/oats.)

Each Environment must correspond to a dir_tests/environments/<environment>.yml
file in OATS.  When OCC is first deployed it automatically enters all the
environments it finds in the dir_tests/environments folder into the OCC DB. The
user should enter any subsequently defined Environment of interest should be
entered via the OCC GUI.

== Executing Test Lists on an Environment

Before using OCC, the user is also expected to enter the test Lists of interest via
the OCC GUI.  Each Lists name should match exactly to a test list file is defined in
OATS dir_tests/lists Folder.

The user also associates each Environment in OCC with a set of Lists selected via
the OCC GUI.

When an environment is ready to test, the user would issue the 'Start' request on
that environment via a link on the home page of OCC.  This 'Start' request is
suitable for initiating test after  automated deployment scripts, at the end of
deployment.  After receiving the Start request,

1. OCC creates a Run request for this environment,
2. OCC creates separate "Job" entries for each List to be executed, puts
them in a DB queue, and associate them with the Run request
3. OCC notifies each OATS agent to start pulling off Jobs from the job
queue.
4. Agents contact the OCC, request a Job, execute it, return results back
to OCC, and request the next Job until no Job is left in the
queue.  Agents go into waiting state if there are no more Jobs to
execute.

== Post Installation Updates/Maintenance


IMPORTANT: OATS/OCC related environment definitions are in
$HOME/occ_environment_vars There are not kept in source control, so DO NOT LOOSE
THEM. Most all the application recovered from source control, except for the
MySQL DB and the test execution logs. Usually they are not deemed critical. If
you disagree you can do daily backups.

On UBUNTU, typically:
-  To start OCC, start an XTERM and type in 'occ'
- To kill it, type '^C' in the terminal.

- You can run OATS locally in NetBeans on the AGENT_HOST machines to debug
  execution issues specific to Ubuntu. Otherwise you should not be on the machine.

To Update the OCC code,

 1. Just in case, save current OCC code: 'cp -r occ occ.save'
    (or note the GITversion, and git checkout that version to restore.)
 2. cd occ
 3. git pull
 3. bundle update
 4. Try starting OCC. If it complains about missing gems, try 'bundle install'
